version: 2.1

commands:
  slack-fail-notification:
    description: Send notification to slack channel that the job failed
    steps:
      - slack/notify:
          event: fail
          mentions: "@aniruddhc"
          template: basic_fail_1
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        description: workflow id to be deleted
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm  s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 2>/dev/null
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Your Memstash GET URL code goes here
            # See an example below
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi  

orbs:
  slack: circleci/slack@4.1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack-fail-notification

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install 
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack-fail-notification
  
  test-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: Testing frontend
          command: |
            cd frontend
            npm install
            npm run test
      - slack-fail-notification
  
  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: Testing backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack-fail-notification
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: Testing frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack-fail-notification
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: Testing backend
          command: |
            cd backend
            npm install
            npm run test
      - slack-fail-notification

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Installing dependencies
          command: |
            yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

            export BACKEND_URL=$(aws cloudformation describe-stacks \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Stacks[0].Outputs[?OutputKey=='BackendURL'].OutputValue" \
              --no-paginate --output text)

            echo $BACKEND_URL
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "${BACKEND_URL}" \
              https://api.memstash.io/values/backendurl

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export BACKEND_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/backendurl)
            echo "${BACKEND_URL}" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: /root/project
          paths:
            - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment    
      - slack-fail-notification

  configure-infrastructure:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "15:50:c8:c4:24:93:f2:48:04:81:ea:af:56:50:58:4d"
      - attach_workspace:
          at: /root/project
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure   
      - destroy-environment   
      - slack-fail-notification

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: prepare environment for backend build
          command: |
            cat \<< EOF > backend/.env
            ENVIRONMENT=production
            VERSION=1
            TYPEORM_CONNECTION=postgres
            TYPEORM_MIGRATIONS_DIR=./src/migrations
            TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            TYPEORM_MIGRATIONS=./src/migrations/*.ts
            TYPEORM_HOST=${TYPEORM_HOST}
            TYPEORM_PORT=${TYPEORM_PORT}
            TYPEORM_USERNAME=${TYPEORM_USERNAME}
            TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
            TYPEORM_DATABASE=${TYPEORM_DATABASE}
            EOF
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm install
            npm run build
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
    # Here's where you will add some code to rollback on failure     
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install tar gzip jq ansible python3 nodejs -y
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances\
              --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}\
              --query 'Reservations[*].Instances[*].PublicDnsName'\
              --region ${AWS_DEFAULT_REGION} --output text)
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment   
      - slack-fail-notification

  deploy-backend:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "15:50:c8:c4:24:93:f2:48:04:81:ea:af:56:50:58:4d"
      - attach_workspace:
          at: /root/project
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible aws-cli openssh-client tar gzip jq
      - run:
          name: Deploy backend
          command: |
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - slack-fail-notification

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_12.x | bash -
            yum install curl jq ansible python3 nodejs -y
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              echo "Frontend smoke passed"
            else
              exit 1
            fi
      - run:
          name: Get backend url
          command: |
              # Fetch and prepare the BACKEND_IP env var
              export BACKEND_IP=$(aws ec2 describe-instances\
                --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}\
                --query 'Reservations[*].Instances[*].PublicDnsName'\
                --region ${AWS_DEFAULT_REGION} --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            curl "${API_URL}/api/status"
      
      # Here's where you will add some code to rollback on failure  
      # - destroy-environment
      # - slack-fail-notification
      # - revert-migrations

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
      # Here's where you will add some code to rollback on failure  

  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          event: always
          mentions: '@EngineeringTeam'
          template: basic_fail_1


workflows:
  # send-notification:
  #   jobs:
  #     - deploy-infrastructure:
  #         context: slack-context
  #     - configure-infrastructure:
  #         requires: [deploy-infrastructure]
  #         context: slack-context
  default:
    jobs:
      - build-frontend:
          context: slack-context
      - build-backend:
          context: slack-context
      - test-frontend:
          requires: [build-frontend]
          context: slack-context
      - test-backend:
          requires: [build-backend]
          context: slack-context
      - scan-backend:
          requires: [build-backend]
          context: slack-context
      - scan-frontend:
          requires: [build-frontend]
          context: slack-context
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          context: slack-context
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context: slack-context
      - run-migrations:
          requires: [configure-infrastructure]
          context: slack-context
      - deploy-frontend:
          requires: [run-migrations]
          context: slack-context
      - deploy-backend:
          requires: [run-migrations]
          context: slack-context
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
